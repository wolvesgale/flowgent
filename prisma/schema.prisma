// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  role      Role
  name      String
  email     String   @unique
  password  String   // ハッシュ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedEvangelists Evangelist[]
}

enum Role {
  ADMIN
  CS
}

model Innovator {
  id         Int      @id @default(autoincrement())
  name       String
  // DB 側に残っている NOT NULL な "company" 列へマッピングする影フィールド
  company    String?  @map("company")
  url        String?
  introPoint String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("Innovator") // 実テーブル名は単数形の Innovator
}

model Evangelist {
  id                     String   @id @default(cuid())
  recordId               String?  @unique // CSV由来のID
  firstName              String?
  lastName               String?
  email                  String?  @unique
  contactMethod          String?  @map("contactPref") // 連絡手段の希望
  supportPriority        String?
  pattern                String?
  meetingStatus          String?
  registrationStatus     String?
  lineRegistered         String?
  phoneNumber            String?
  acquisitionSource      String?
  facebookUrl            String?
  listAcquired           String?
  listProvided           Boolean   @default(false)
  matchingListUrl        String?
  contactOwner           String?
  marketingContactStatus String?
  sourceCreatedAt        DateTime?
  strength               String?  @map("strengths") // 強み・専門分野（初回面談で入力）
  notes                  String?  // 備考
  nextAction             String?
  nextActionDueOn        DateTime?
  managementPhase        String?
  tier                   Tier     @default(TIER2)
  assignedCsId           String?
  assignedCs             User?    @relation(fields: [assignedCsId], references: [id])
  tags                   String?  // JSON文字列として保存（配列をJSONで格納）
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  meetings               Meeting[]

  @@map("evangelists")
}

enum Tier {
  TIER1
  TIER2
}

// 以下の enum は将来の型厳格化/UI向けに残置（現状は Evangelist は String 列を使用）
enum EvangelistStrength {
  HR
  IT
  ACCOUNTING
  ADVERTISING
  MANAGEMENT
  SALES
  MANUFACTURING
  MEDICAL
  FINANCE
}

enum ContactPreference {
  FACEBOOK
  LINE
  EMAIL
  PHONE
  SLACK
}

enum EvangelistPhase {
  FIRST_CONTACT
  REGISTERED
  LIST_SHARED
  CANDIDATE_SELECTION
  INNOVATOR_REVIEW
  INTRODUCING
  FOLLOW_UP
}

model Meeting {
  id            String     @id @default(cuid())
  evangelistId  String
  evangelist    Evangelist @relation(fields: [evangelistId], references: [id])
  date          DateTime   @default(now())
  isFirst       Boolean    @default(false)
  summary       String?    // 前回サマリー or 今回メモ
  nextActions   String?    // 次回アクション
  contactMethod String?    // 面談で確認
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}
